{"version":3,"sources":["../src/index.ts"],"sourcesContent":["export type Permissions = { [key: string]: readonly string[] }\nexport type ResourceNameType<TPermission extends Permissions> = keyof TPermission extends string\n  ? keyof TPermission\n  : never\n\n// each key of resource is a resource name\nexport type PermissionType<TPermission extends Permissions> = {\n  [k in keyof TPermission]: k extends string ? `${k}.${TPermission[k][number]}` | `${k}.*` : never\n}[keyof TPermission]\n\nexport type PermissionUnionType<TPermission extends Permissions> =\n  | readonly PermissionType<TPermission>[]\n  | '*'\n\nexport type RoleType<TKey extends string, TPermission extends Permissions> = Record<\n  TKey,\n  PermissionUnionType<TPermission>\n>\n\nexport type RolePermissionType<TPermission extends Permissions> =\n  `${ResourceNameType<TPermission>}.${TPermission[ResourceNameType<TPermission>][number]}`\n\nexport interface Roles<TPermission extends Permissions> {\n  [key: string]: readonly RolePermissionType<TPermission>[]\n}\n\nexport type IamPolicyType<\n  TPermission extends Permissions,\n  TName extends string,\n  TRoleKey extends string,\n> = {\n  name: TName\n  permissions: TPermission\n  roles: RoleType<TRoleKey, TPermission>\n}\n\nexport type AllPolicyType<TPolicies extends readonly IamPolicyType<Permissions, string, string>[]> =\n  TPolicies extends readonly [infer TPolicy, ...infer Rest]\n    ? TPolicy extends IamPolicyType<Permissions, infer N, string>\n      ? Rest extends IamPolicyType<Permissions, string, string>[]\n        ?\n            | {\n                [k in keyof TPolicy['roles']]: `${N}.${k extends string ? k : ''}`\n              }[keyof TPolicy['roles']]\n            | AllPolicyType<Rest>\n        : {\n            [k in keyof TPolicy['roles']]: `${N}.${k extends string ? k : ''}`\n          }[keyof TPolicy['roles']]\n      : never\n    : never\n\nexport type AllPermissionType<\n  TPolicies extends readonly IamPolicyType<Permissions, string, string>[],\n> = TPolicies extends readonly [infer TPolicy, ...infer Rest]\n  ? TPolicy extends IamPolicyType<Permissions, infer N, string>\n    ? Rest extends IamPolicyType<Permissions, string, string>[]\n      ?\n          | {\n              [k in keyof TPolicy['permissions']]: `${N}.${k extends string\n                ? k\n                : ''}.${TPolicy['permissions'][k][number]}`\n            }[keyof TPolicy['permissions']]\n          | AllPermissionType<Rest>\n      : {\n          [k in keyof TPolicy['permissions']]: `${N}.${k extends string ? k : ''}`\n        }[keyof TPolicy['permissions']]\n    : never\n  : never\n\nexport function createPolicy<\n  const TPermission extends Permissions,\n  TName extends string,\n  TRoleKey extends string,\n>({\n  name,\n  permissions,\n  roles,\n}: {\n  name: TName\n  permissions: TPermission\n  roles: RoleType<TRoleKey, TPermission>\n}): IamPolicyType<TPermission, TName, TRoleKey> {\n  return {\n    name,\n    permissions,\n    roles,\n  } as const\n}\n\n//create role from many resource groups\nexport function createIdentity<\n  TPermissions extends Permissions,\n  TName extends string,\n  TRoleKey extends string,\n  const TPolicies extends readonly IamPolicyType<TPermissions, TName, TRoleKey>[],\n  TRole extends string,\n>({\n  identities,\n  policies,\n}: {\n  policies: TPolicies\n  identities: Record<TRole, readonly AllPolicyType<TPolicies>[]>\n}) {\n  const table: Record<string, Record<string, boolean>> = {}\n  const allPerm: Record<string, Set<string>> = {}\n\n  const identityList = Object.keys(table) as TRole[]\n  const allPermissions: AllPermissionType<TPolicies>[] = []\n\n  policies.forEach((policy) => {\n    Object.keys(policy.roles).forEach((role) => {\n      const key = `${policy.name}.${role}`\n      allPerm[key] = new Set()\n      const permissions = policy.roles[role as TRoleKey]\n      if (permissions === '*') {\n        Object.keys(policy.permissions).forEach((permission) => {\n          policy.permissions[permission].forEach((p) => {\n            allPerm[key].add(`${policy.name}.${permission}.${p}`)\n          })\n        })\n      } else {\n        permissions.forEach((permissions) => {\n          if (permissions.endsWith('.*')) {\n            policy.permissions[permissions.replace('.*', '')].forEach((p) => {\n              allPerm[key].add(`${policy.name}.${permissions.replace('.*', '')}.${p}`)\n            })\n            return\n          }\n          allPerm[key].add(`${policy.name}.${permissions}`)\n        })\n      }\n    })\n  })\n\n  Object.keys(identities).forEach((role) => {\n    table[role] = {}\n    identities[role as TRole].forEach((policy) => {\n      Object.keys(policy).forEach((_role) => {\n        const permissions = allPerm[policy]\n        permissions.forEach((permission) => {\n          table[role][permission] = true\n        })\n      })\n    })\n  })\n\n  const enforce = (identity: TRole, permissions: readonly AllPermissionType<TPolicies>[]) => {\n    return permissions.every((permission) => {\n      return table[identity] !== undefined && table[identity][permission] === true\n    })\n  }\n\n  return { identities: identityList, allPermissions, enforce }\n}\n"],"mappings":"AAqEO,SAASA,EAId,CACA,KAAAC,EACA,YAAAC,EACA,MAAAC,CACF,EAIgD,CAC9C,MAAO,CACL,KAAAF,EACA,YAAAC,EACA,MAAAC,CACF,CACF,CAGO,SAASC,EAMd,CACA,WAAAC,EACA,SAAAC,CACF,EAGG,CACD,IAAMC,EAAiD,CAAC,EAClDC,EAAuC,CAAC,EAExCC,EAAe,OAAO,KAAKF,CAAK,EAChCG,EAAiD,CAAC,EAExD,OAAAJ,EAAS,QAASK,GAAW,CAC3B,OAAO,KAAKA,EAAO,KAAK,EAAE,QAASC,GAAS,CAC1C,IAAMC,EAAM,GAAGF,EAAO,IAAI,IAAIC,CAAI,GAClCJ,EAAQK,CAAG,EAAI,IAAI,IACnB,IAAMX,EAAcS,EAAO,MAAMC,CAAgB,EAC7CV,IAAgB,IAClB,OAAO,KAAKS,EAAO,WAAW,EAAE,QAASG,GAAe,CACtDH,EAAO,YAAYG,CAAU,EAAE,QAASC,GAAM,CAC5CP,EAAQK,CAAG,EAAE,IAAI,GAAGF,EAAO,IAAI,IAAIG,CAAU,IAAIC,CAAC,EAAE,CACtD,CAAC,CACH,CAAC,EAEDb,EAAY,QAASA,GAAgB,CACnC,GAAIA,EAAY,SAAS,IAAI,EAAG,CAC9BS,EAAO,YAAYT,EAAY,QAAQ,KAAM,EAAE,CAAC,EAAE,QAASa,GAAM,CAC/DP,EAAQK,CAAG,EAAE,IAAI,GAAGF,EAAO,IAAI,IAAIT,EAAY,QAAQ,KAAM,EAAE,CAAC,IAAIa,CAAC,EAAE,CACzE,CAAC,EACD,MACF,CACAP,EAAQK,CAAG,EAAE,IAAI,GAAGF,EAAO,IAAI,IAAIT,CAAW,EAAE,CAClD,CAAC,CAEL,CAAC,CACH,CAAC,EAED,OAAO,KAAKG,CAAU,EAAE,QAASO,GAAS,CACxCL,EAAMK,CAAI,EAAI,CAAC,EACfP,EAAWO,CAAa,EAAE,QAASD,GAAW,CAC5C,OAAO,KAAKA,CAAM,EAAE,QAASK,GAAU,CACjBR,EAAQG,CAAM,EACtB,QAASG,GAAe,CAClCP,EAAMK,CAAI,EAAEE,CAAU,EAAI,EAC5B,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,EAQM,CAAE,WAAYL,EAAc,eAAAC,EAAgB,QANnC,CAACO,EAAiBf,IACzBA,EAAY,MAAOY,GACjBP,EAAMU,CAAQ,IAAM,QAAaV,EAAMU,CAAQ,EAAEH,CAAU,IAAM,EACzE,CAGwD,CAC7D","names":["createPolicy","name","permissions","roles","createIdentity","identities","policies","table","allPerm","identityList","allPermissions","policy","role","key","permission","p","_role","identity"]}